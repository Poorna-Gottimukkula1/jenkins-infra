@Library('jenkins-upstream-library') _
def failedStages = []
pipeline {
    agent {
        docker {
            image 'quay.io/powercloud/inbound-agent:3256.v88a_f6e922152-2-jdk17.1'
            args '-v /etc/resolv.conf:/etc/resolv.conf -v /run/containerd/containerd.sock:/run/containerd/containerd.sock'
            label 'jump-vpc-x86_64'
        }
    }
    parameters {
        string(defaultValue: '', description: 'Build(quay image or build number)', name: 'Build')
        string(defaultValue: '30', description: 'Enter time(in Minutes) to retain the cluster', name: 'KeepFor')
        string(defaultValue: '1.22.1', description: 'Enter the Go Language Version', name: 'GoLangVersion')
        choice(description: 'Select the OpenShift Release', choices: ['4.16','4.15','4.14','4.13','4.12'], name: 'Release')
        choice(description: 'Select the RedHat Release Version', choices: ['9.4','9.3','9.2','9.1','9.0', '8.8','8.7'], name: 'RedHatRelease')
        choice(description: 'Select the Configuration', choices: ['min','max'], name: 'Config')
        booleanParam(defaultValue: true, name: 'RunCroE2e', description: 'Select if you want to run CRO e2e tests. E2e runs after cluster Deployed')
        booleanParam(defaultValue: true, name: 'RunMetallbE2e', description: 'Select if you want to run Metallb e2e tests. E2e runs after cluster Deployed')
    } 
    environment {
        //users and credentials. All must be defined in Jenkins Credentials
        GITHUB_USER = credentials('PUBLIC_GITHUB_USER') 
        GITHUB_TOKEN = credentials('PUBLIC_GITHUB_TOKEN')
        OS_USERNAME = credentials('OS_USERNAME')
        OS_PASSWORD = credentials('OS_PASSWORD')
        ARTIFACTORY_USER = credentials('ARTIFACTORY_USER')
        ARTIFACTORY_TOKEN = credentials('ARTIFACTORY_TOKEN')
        REDHAT_USERNAME = credentials('REDHAT_USERNAME')
        REDHAT_PASSWORD = credentials('REDHAT_PASSWORD')
        PULL_SECRET = credentials('PULL_SECRET')

        //Env constants
        HARDWARE_CHOSE = "P9"
        TERRAFORM_VER = "1.8.4"
        TARGET = "deploy-openshift4-powervc"
        TEMPLATE_FILE = ".${TARGET}.tfvars.template"
        POWERVS = false
        SCRIPT_DEPLOYMENT = false
        WAIT_FOR_DEBUG = "1"

        //Branch
        OPENSHIFT_POWERVC_GIT_TF_DEPLOY_BRANCH="main"//The download branch

        //E2e specific variables
        GOLANG_VERSION="${params.GoLangVersion}"
        GOLANG_TARBALL="https://go.dev/dl/go${GOLANG_VERSION}.linux-ppc64le.tar.gz"
        //ClusterResourceOverride operator E2e
        ENABLE_CRO_E2E_TEST="${params.RunCroE2e}"
        //Metallb operator E2e
        ENABLE_METALLB_E2E_TEST="${params.RunMetallbE2e}"
        //Ip address for metallb Operators E2E
        L2_ADDRESS1="10.20.182.101"
        L2_ADDRESS2="10.20.182.102"
        BGB_ADDRESS1="10.20.182.103"

        //Parameters
        REDHAT_RELEASE="${params.RedHatRelease}"
        OCP_RELEASE="${params.Release}"
        CONFIG_TYPE="${params.Config}"
        BUILD="${params.Build}"
        TIMEOUT = "${params.KeepFor}"

        // kdump Configuration
        KDUMP_ENABLE="false"
    }
    stages {
        stage('Clone ansible extra') {
            steps {
                cloneRepo("https://github.com/ocp-power-automation/ocp4-playbooks-extras", "ocp4-playbooks-extras", "*/main")
            }
        }
        stage('Setup Common Environment Variables') {
            steps {
                setupCommonEnvironmentVariables()
                setupClusterConfig("${CONFIG_TYPE}")
            }
        }
        stage('pull artifact') {
            steps {
                script {
                    getArtifacts("mirror-openshift-release", "latest-${OCP_RELEASE}-build.txt")
                    getArtifacts("powervm/poll-powervc-images", "cicd-rhcos-${OCP_RELEASE}.latest.txt")
                    getArtifacts("powervm/poll-powervc-images", "cicd-rhel-${REDHAT_RELEASE}.latest.txt")
                }
            }
        }
        //Checkout the installer git repo
        stage('Prepare Terraform Template') {
            steps {
                script {
                    sh '''
                    #!/bin/bash
                    git clone 

                    '''
                }
            }
        }
    }
    post {
        always {
            archiveAllArtifacts("deploy/croo_e2e_output_*.txt", "deploy/e2e-metallb-repo-logs.txt", "deploy/e2e-metallb-private-logs.txt", "deploy/vars.tfvars")
            cleanWs()
        }
    }
}
