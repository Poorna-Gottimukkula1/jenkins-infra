@Library('jenkins-upstream-library') _
pipeline {
    agent {
        docker {
            image 'quay.io/powercloud/inbound-agent:3256.v88a_f6e922152-2-jdk17.1'
            args '-v /etc/resolv.conf:/etc/resolv.conf -v /run/containerd/containerd.sock:/run/containerd/containerd.sock'
            label 'jump-vpc-x86_64'
        }
    }
    options {
        copyArtifactPermission('*');
    }
    environment {
        ARTIFACTORY_USER = credentials('ARTIFACTORY_USER')
        ARTIFACTORY_TOKEN = credentials('ARTIFACTORY_TOKEN')
        CI_OCP_TOKEN = credentials('CI_OCP_TOKEN')
        DOCKER_REGISTRY = "docker-na.artifactory.swg-devops.com/sys-powercloud-docker-local"
    }
    stages {
        stage('Get images and push') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                            cd ${WORKSPACE}/scripts
                            nerdctl login -u ${ARTIFACTORY_USER} -p ${ARTIFACTORY_TOKEN} ${DOCKER_REGISTRY}
                            #oc login --token=${CI_OCP_TOKEN} --server=https://api.ci.l2s4.p1.openshiftapps.com:6443
                            #oc registry login --skip-check --registry-config ~/.docker/config.json
                            #./mirror-images.sh || true
                        '''
                    } catch (err) {
                        echo 'Error ! Mirroring Failed!'
                        throw err
                    }
                }
            }
        }

        stage('Download OCP Build info') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                            curl https://openshift-release-ppc64le.apps.ci.l2s4.p1.openshiftapps.com/ > builds-ppc64le.raw.txt
                            curl https://openshift-release-multi.apps.ci.l2s4.p1.openshiftapps.com/ > builds-multi.raw.txt
                            cat builds-ppc64le.raw.txt | grep -A 2 '<td class="text-monospace"' | grep -v '^--' | awk 'NR%3{printf "%s ",$0;next;}1'|grep -v 'Failed' |sed 's|\\([^/]*/\\)\\{4\\}[^>]*>\\([^>]*\\).*title[^"]*"\\([^"]*\\).*|\\2  \\3|' | sed 's/<\\/a//'| sort -k2 -r |awk -v registry="${DOCKER_REGISTRY}" '{print registry"/ocp-ppc64le/release-ppc64le:"$0}' > all-builds-ppc64le.txt
                            cat builds-multi.raw.txt | grep -A 2 '<td class="text-monospace"' | grep -v '^--' | awk 'NR%3{printf "%s ",$0;next;}1'|grep -v 'Failed' |sed 's|\\([^/]*/\\)\\{4\\}[^>]*>\\([^>]*\\).*title[^"]*"\\([^"]*\\).*|\\2  \\3|' | sed 's/<\\/a//'| sort -k2 -r > all-builds-multi.txt
                            
                            # Iterate through each build and determine the correct Quay tag
                            for build in $(cat all-builds-multi.txt| awk '{print $1}'); do
                                if echo $build | grep -q "nightly"; then
                                    echo "quay.io/openshift-release-dev/ocp-release-nightly:${build}" >> all-builds-multi-quay.txt
                                else
                                    if echo $build | grep -q "multi"; then
                                        echo "quay.io/openshift-release-dev/ocp-release:${build}" >> all-builds-multi-quay.txt
                                    else
                                        echo "quay.io/openshift-release-dev/ocp-release:${build}-multi" >> all-builds-multi-quay.txt
                                    fi
                                fi
                            done

                            for version in 11 12 13 14 15 16 17; do
                                echo "processing vesion 4.$version"
                                grep "4\\.$version\\.[0-9]\\?[0-9]" all-builds-multi-quay.txt  > all-4.$version-builds-multi.txt
                                grep "4\\.$version\\.[0-9]\\?[0-9]" all-builds-ppc64le.txt  > all-4.$version-builds-ppc64le.txt

                                # Create latest files for multi and ppc64le
                                cat all-4.$version-builds-multi.txt | head -n 1 | awk '{print $1}' > latest-4.$version-build-multi.txt
                                cat all-4.$version-builds-ppc64le.txt | head -n 1 | awk '{print $1}' > latest-4.$version-build-ppc64le.txt
                                
                                cat all-4.$version-builds-multi.txt

                                # Create stable and rc/ec files
                                cat all-4.$version-builds-multi.txt | grep -v 'nightly\\|-rc\\|-fc\\|-ec' > all-4.$version-stable-builds-multi.txt
                                cat all-4.$version-builds-ppc64le.txt | grep -v 'nightly\\|-rc\\|-fc\\|-ec' > all-4.$version-stable-builds-ppc64le.txt

                                cat all-4.$version-builds-multi.txt | grep '\\-rc' > all-4.$version-rc-builds-multi.txt
                                cat all-4.$version-builds-ppc64le.txt | grep '\\-rc' > all-4.$version-rc-builds-ppc64le.txt
                                
                                # Create latest stable and rc files
                                cat all-4.$version-stable-builds-multi.txt | head -n 1 | awk '{print $1}' > latest-4.$version-stable-build-multi.txt
                                cat all-4.$version-stable-builds-ppc64le.txt | head -n 1 | awk '{print $1}' > latest-4.$version-stable-build-ppc64le.txt

                                cat all-4.$version-rc-builds-multi.txt | head -n 1 | awk '{print $1}' > latest-4.$version-rc-build-multi.txt
                                cat all-4.$version-rc-builds-ppc64le.txt | head -n 1 | awk '{print $1}' > latest-4.$version-rc-build-ppc64le.txt
                            done
                            pre_release_version=4.18
                            grep "${pre_release_version}\\.[0-9]\\?[0-9]" all-builds-multi-quay.txt  > all-${pre_release_version}-builds-multi.txt
                            grep "${pre_release_version}\\.[0-9]\\?[0-9]" all-builds-ppc64le.txt  > all-${pre_release_version}-builds-ppc64le.txt
                            grep "${pre_release_version}\\.[0-9]\\?[0-9]-ec" all-${pre_release_version}-builds-multi.txt > all-${pre_release_version}-ec-builds-multi.txt
                            grep "${pre_release_version}\\.[0-9]\\?[0-9]-ec" all-${pre_release_version}-builds-ppc64le.txt > all-${pre_release_version}-ec-builds-ppc64le.txt
                            cat all-${pre_release_version}-ec-builds-multi.txt | head -n 1 | awk '{print $1}' > latest-${pre_release_version}-ec-build-multi.txt
                            cat all-${pre_release_version}-ec-builds-ppc64le.txt | head -n 1 | awk '{print $1}' > latest-${pre_release_version}-ec-build-ppc64le.txt
                            
                        '''
                    } catch (err) {
                        echo 'Error ! Download OCP Build info failed !'
                        env.FAILED_STAGE=env.STAGE_NAME
                        throw err
                    }
                }
            }
        }
    }
    post {
        always {
            archiveAllArtifacts("builds.raw.txt", "all-builds-multi.txt", "all-builds-ppc64le.txt", 
                                "latest-4.*-build-multi.txt", "latest-4.*-build-ppc64le.txt", "all-4.*-builds-ppc64le.txt" , "all-4.*-builds-multi.txt" ,
                                "all-4.*-stable-builds-multi.txt", "all-4.*-stable-builds-ppc64le.txt", 
                                "all-4.*-rc-builds-multi.txt", "all-4.*-rc-builds-ppc64le.txt", 
                                "all-4.*-ec-builds-multi.txt", "all-4.*-ec-builds-ppc64le.txt")
            cleanWs()
        }
    }
}