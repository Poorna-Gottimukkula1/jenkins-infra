@Library('jenkins-upstream-library') _

pipeline {
    agent {
        docker {
            image 'quay.io/pgottimu/cucushift-ipi:4.15.1'
            args '-v /etc/resolv.conf:/etc/resolv.conf'
            label 'jump-vpc-x86_64'
        }
    }
    environment {
        //users and credentials. All must be defined in Jenkins Credentials
        PULL_SECRET = credentials('PULL_SECRET')
        GITHUB_USER = credentials('GITHUB_USER_TEST_PG')
        GITHUB_TOKEN = credentials('GITHUB_TOKEN_PG')
        IBMID="ltccci@in.ibm.com"
        IBMCLOUD_API_KEY=credentials('IBMCLOUD_UPSTREAM_CI_API_KEY_1')
        IC_API_KEY=credentials('IBMCLOUD_UPSTREAM_CI_API_KEY_1')

        // Cloud Controller Manager API Key
        IBMCLOUD_OCCMICCC_API_KEY=credentials('IBMCLOUD_OCCMICCC_API_KEY')
        // Ingress Operator API Key
        IBMCLOUD_OIOCCC_API_KEY=credentials('IBMCLOUD_OIOCCC_API_KEY')
        // Machine API Key
        IBMCLOUD_OMAPCC_API_KEY=credentials('IBMCLOUD_OMAPCC_API_KEY')
        // CSI Driver API key
        IBMCLOUD_OCCDIPCCC_API_KEY=credentials('IBMCLOUD_OCCDIPCCC_API_KEY')
        // Storage Operator API key
        IBMCLOUD_OIRICCC_API_KEY=credentials('IBMCLOUD_OIRICCC_API_KEY')

        //PowerVS specific variables
        POWERVS_REGION = "wdc"
        POWERVS_ZONE = "wdc06"
        SERVICE_INSTANCE_GUID = "ee746023-4bbe-4bae-b747-e79b3fd229ca"
        VPCREGION= "us-east"
        RESOURCE_GROUP="ibm-internal-cicd-resource-group"
        SERVICE_INSTANCE="rdr-ipi-cicd-washingtondc06"

        JENKINS_TOKEN=""

        BASEDOMAIN="ppc64le-cloud.cis.ibm.net"
        OCP_RELEASE = "4.17"
        CLUSTER_NAME="rdr-cicd-wdc06-417"
        CLUSTER_DIR="./ipi-install"
        GO_VERSION="1.22.4"
        OPENSHIFT_CLIENT_TARBALL_AMD64="https://mirror.openshift.com/pub/openshift-v4/amd64/clients/ocp-dev-preview/candidate-4.17/openshift-client-linux-amd64-rhel8.tar.gz"
        //OPENSHIFT_INSTALLER_URL="https://mirror.openshift.com/pub/openshift-v4/amd64/clients/ocp-dev-preview/candidate-4.16/openshift-install-linux.tar.gz"
        POWERVS = true
        TIMEOUT = "720"
	 }
    stages {
        stage('pull artifact') {
            steps {
                getArtifacts("mirror-openshift-release", "latest-${OCP_RELEASE}-build.txt" )
            }
        }

        stage('Initialize Environment') {
            steps {
                initializeEnvironment("${VPCREGION}","${RESOURCE_GROUP}")
            }
        }
        //Checkout the installer git repo
        stage('IPI run prepare') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try
                    {
                        env.OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE = ""
                        if (fileExists("deploy/artifactory/latest-${OCP_RELEASE}-build.txt")) {
                            env.OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE = readFile "deploy/artifactory/latest-${OCP_RELEASE}-build.txt"
                            env.OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE = env.OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE.trim()
                            env.OPENSHIFT_INSTALL_RELEASE_VERSION = env.OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE.split(":")[1].trim()
                        }
                        else {
                            echo "latest-${OCP_RELEASE}-build.txt file does not exist. Please check mirror-openshift-release job"
                            throw err
                        }
                            sh '''
                                cd ${WORKSPACE}/deploy
                                set +x
                                echo ${PULL_SECRET} > ~/.pullSecret
                                set -x
                                cp -rf ${WORKSPACE}/deploy/id_rsa.pub ~/.ssh/id_installer_rsa.pub
                                git clone https://github.com/Poorna-Gottimukkula1/powervs-hack.git
                                oc adm release extract --tools ${OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE} --to openshift-tools -a ~/.pullSecret
                                tar -xvf ./openshift-tools/openshift-install-linux-amd64-${OPENSHIFT_INSTALL_RELEASE_VERSION}.tar.gz  -C /usr/local/bin
                                tar -xvf ./openshift-tools/openshift-client-linux-amd64-${OPENSHIFT_INSTALL_RELEASE_VERSION}.tar.gz  -C /usr/bin
                                rm -rf ./openshift-tools
                                #curl -L "${OPENSHIFT_INSTALLER_URL}" > openshift-install-linux.tar.gz
                                #tar -xvf openshift-install-linux.tar.gz  -C /usr/local/bin
                                 # setup oc client
                                #if [ ${OPENSHIFT_CLIENT_TARBALL_AMD64} ]; then
                                #    wget --quiet "${OPENSHIFT_CLIENT_TARBALL_AMD64}" -O - | tar -xz
                                #    [ $? -ne 0 ] && echo "unable to get oc tarball" && exit 1
                                #    cp kubectl oc /usr/bin/
                                #fi
                                oc version
                                openshift-install version
                                sed -i "s|\\.Payload\\.cloudConnections\\[\\]|\\.cloudConnections\\[\\]|g" ./powervs-hack/scripts/create-cluster.sh
                                sed -i "s|\\.Payload\\.jobs\\[\\]|\\.jobs\\[\\]|g" ./powervs-hack/scripts/create-cluster.sh
                                sed -i "s|export OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE.*$|export OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE=\\"${OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE}\\"|g" ./powervs-hack/scripts/create-cluster.sh
                                sed -i "s|export OPENSHIFT_INSTALL_OS_IMAGE_OVERRIDE.*$||g" ./powervs-hack/scripts/create-cluster.sh
                                sed -i "s|platform: {}|platform: \\n    powervs:\\n      processors: \\"0.5\\"\\n      sysType: e980|g" ./powervs-hack/scripts/create-cluster.sh
                                sed -i "s|USE_CAPI=false|USE_CAPI=true|g" ./powervs-hack/scripts/create-cluster.sh
                            '''
                    }
                    catch (err)
                    {
                        echo 'Error ! IPI cluster setup failed !'
                        env.FAILED_STAGE=env.STAGE_NAME
                        throw err
                    }
                }
            }
        }
        stage('Create IPI cluster') {
            steps {
                createIPICluster()
            }
        }
        stage('Validate CO status') {
            when { expression { return env.DEPLOYMENT_STATUS == "true"; } }
            steps {
                 script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        // Get Cluster Operators status
                        sh '''#!/bin/bash
                            cd ${WORKSPACE}/deploy
                            rm -rf ~/.kube
                            mkdir ~/.kube
                            cat ${CLUSTER_DIR}/auth/kubeconfig
                            cp ${CLUSTER_DIR}/auth/kubeconfig ~/.kube/config
                            cat ~/.kube/config
                            echo 'oc version'
                            oc version
                            echo 'Setting up kubectl!'
                            oc get nodes
                            cd ${WORKSPACE}
                            sleep_time=300
                            count=0
                            for((i=0;i<18;++i)) do
                                count=$(oc get co --no-headers | awk '{ print $3 $4 $5 }' | grep -w -v TrueFalseFalse | wc -l)
                                if [ $count -ne 0 ]; then
                                    echo "sleeping for 5 mins all co are not up"
                                    sleep $sleep_time
                                elif [[ $(oc get co --no-headers) == *"error"* ]]; then
                                    count=1
                                    break
                                else
                                    echo "All cluster operators are up and running"
                                    echo "All cluster operators were up and running" > ${WORKSPACE}/co_status.txt
                                    count=0
                                    oc get co
                                    break
                                fi
                            done
                            if [ $count -ne 0 ]; then
                                oc get co
                                echo "Cluster operators were in degraded state after 90 mins" > ${WORKSPACE}/co_status.txt
                                echo "Cluster operators are in degraded state after 90 mins Tearing off cluster!!"
                                exit 1
                            fi
                        '''
                    }
                    catch (err) {
                        echo 'Error ! All Cluster Operators are not Up  !'
                        env.FAILED_STAGE=env.STAGE_NAME
                        throw err
                    }
                }

            }
        }
        stage('Setup tools and Run openshift-tests-private Suite') {
            when { expression { return env.DEPLOYMENT_STATUS == "true"; } }
            steps {
                 script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''#!/bin/bash -x
                        cd ${WORKSPACE}/deploy
                        curl https://dl.google.com/go/go"${GO_VERSION}".linux-amd64.tar.gz -o go"${GO_VERSION}".linux-amd64.tar.gz
                        tar -C /usr/local -xzf go"${GO_VERSION}".linux-amd64.tar.gz
                        git clone https://github.com/operator-framework/operator-sdk
                        cd operator-sdk/
                        make build
                        cp -rp ./build/* /usr/local/bin
                        cd ..
                        wget https://mirror.openshift.com/pub/openshift-v4/ppc64le/clients/ocp-dev-preview/candidate-${OCP_RELEASE}/opm-src.tar.gz
                        tar -xzf opm-src.tar.gz
                        cd operator-framework-olm-*
                        make build
                        cp -rp ./bin/* /usr/local/bin
                        cd ..
                        git clone https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/openshift/openshift-tests-private.git -b "release-${OCP_RELEASE}"
                        cd openshift-tests-private
                        make build
                        cp -rp ./bin/extended-platform-tests /usr/local/bin/
                        cd ..
                        chmod 777 ${WORKSPACE}/scripts/openshift-tests-private.sh && ${WORKSPACE}/scripts/openshift-tests-private.sh | tee ./openshift-private-tests.log 2>&1
                        '''
                    }
                    catch (err) {
                        echo 'Error ! All Cluster Operators are not Up  !'
                        env.FAILED_STAGE=env.STAGE_NAME
                        throw err
                    }
                }

            }
        }
        stage('Run verification/cucushift tests') {
            when { expression { return env.DEPLOYMENT_STATUS == "true"; } }
            steps {
                 script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''#!/bin/bash
                        cd ${WORKSPACE}/deploy
                        chmod 777 ${WORKSPACE}/scripts/verification-ipi.sh && ${WORKSPACE}/scripts/verification-ipi.sh | tee ./verification.log 2>&1
                        '''
                    }
                    catch (err) {
                        echo 'Error ! All Cluster Operators are not Up  !'
                        env.FAILED_STAGE=env.STAGE_NAME
                        throw err
                    }
                }

            }
        }
        stage('Waiting to timeout') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        TIMEOUT_MIN = TIMEOUT.toInteger()
                        if ( TIMEOUT_MIN != 0 )
                        {
                            TIMEOUT_SEC=TIMEOUT_MIN*60
                        }
                        echo "HOLDING THE CLUSTER TEAR DOWN FOR ${TIMEOUT_MIN} MINUTES"
                        sleep TIMEOUT_SEC
                        }
                    catch (err) {
                        echo 'Error ! Timeout stage failed!'
                        env.FAILED_STAGE=env.STAGE_NAME
                        throw err
                    }
                }
            }
        }
    }
    post {
        always {
            archiveAllArtifacts("deploy/metadata.json", "deploy/verification.log", "deploy/openshift-private-tests.log", "deploy/extended-platform-tests_cmd.log")
            script {
               sh '''#!/bin/bash
                echo "Cleanup IPI cluster"
                if [ -d ${WORKSPACE}/deploy ];then
                    cd ${WORKSPACE}/deploy
                else
                  exit 1
                fi
                ibmcloud login -a cloud.ibm.com -r ${VPCREGION} -g ${RESOURCE_GROUP} -q --apikey=${IBMCLOUD_API_KEY}
                for I in infrastructure-service cloud-internet-services dl-cli dns; do
                   ibmcloud plugin install ${I}
                done
                ./powervs-hack/scripts/dump-powervs.sh
                retries=0
                until [ "$retries" -ge 3 ]
                do
                  cp -f ${CLUSTER_DIR}/metadata.json ./metadata_copy.json
                  openshift-install destroy cluster  --log-level=debug --dir ${CLUSTER_DIR} || true
                  mv -f ./metadata_copy.json ${CLUSTER_DIR}/metadata.json
                  retries=$((retries+1))
                done
                #Get connections
                ibmcloud login -a cloud.ibm.com -r ${VPCREGION} -g ${RESOURCE_GROUP} -q --apikey=${IBMCLOUD_API_KEY}
                cons=$(ibmcloud pi cloud-connection ls| grep "cloud-con-rdr-cicd"|awk '{print $1}')
                echo "$cons"| while IFS= read -r line ; do ibmcloud pi cloud-connection delete $line; done || true
                #Get DHCP
                ./powervs-hack/scripts/get-dhcp.sh || true
                dhcp_id=$(./powervs-hack/scripts/get-dhcp.sh | awk 'FNR == 4 {print $1}')
                ./powervs-hack/scripts/get-dhcp.sh $dhcp_id -d || ibmcloud pi ins delete $dhcp_id || true
                '''
            }
            //notifyBySlack(currentBuild.result, env.MESSAGE)
            cleanWs()
        }
    }
}
